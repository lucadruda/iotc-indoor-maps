{"version":3,"sources":["hooks.ts","deploymentContext.tsx","steps/Deploy.tsx","api.ts","steps/Upload.tsx","steps/Configure.tsx","App.tsx","reportWebVitals.js","index.js"],"names":["formatBytes","bytes","decimals","k","dm","sizes","i","Math","floor","log","parseFloat","pow","toFixed","initialState","subscriptionId","tenantId","mapSubscriptionKey","drawingUUIDs","tileSetId","statesetId","DeploymentContext","React","createContext","Provider","DeploymentProvider","children","useState","state","setState","store","useCallback","data","current","value","Deploy","memo","visible","enableNext","submit","resetSubmit","useContext","setData","nextEnabled","useRef","useEffect","href","target","src","style","textAlign","TextField","label","onChange","e","val","API_VERSION","uploadPackage","location","subscriptionKey","onProgress","a","progress","axios","post","headers","res","waitForSuccess","body","header","matches","match","length","convertPackage","udid","re","RegExp","createOrUpdateDataSet","conversionId","datasetId","createTileset","createStateset","styles","keyName","type","rules","true","false","range","minimum","exclusiveMaximum","color","status","url","expectedResult","onSuccess","Promise","resolve","reject","intid","setInterval","get","clearInterval","result","classNames","mergeStyleSets","listGrid","width","display","justifyContent","alignItems","gap","listGridItem","padding","height","border","clickable","backgroundColor","cursor","button","flexDirection","Upload","items","setItems","uploadFn","acceptedFiles","forEach","file","reader","FileReader","onload","map","name","drawingUUid","uuid","readAsArrayBuffer","size","useDropzone","onDrop","maxFiles","accept","getRootProps","getInputProps","isDragActive","filter","onRenderCell","item","index","className","Icon","iconName","ProgressIndicator","description","percentComplete","progressHidden","content","Configure","text","setText","execute","convIds","drawingUUID","convId","push","wizardBody","footer","position","bottom","arrow","icon","Wizard","start","setCurrent","useSteps","next","previous","setNextEnabled","init","setValue","reset","submitting","set","useSubmit","FontIcon","onClick","totalSteps","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initializeIcons","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2c5e5bda.chunk.js","sourcesContent":["import React, { useCallback, useState } from \"react\";\n\nexport function useSteps(start?: number): [number, () => void, () => void] {\n  const [current, setCurrent] = useState<number>(start || 0);\n\n  const next = useCallback(() => {\n    setCurrent((current) => current + 1);\n  }, [setCurrent]);\n\n  const previous = useCallback(() => {\n    setCurrent((current) => current - 1);\n  }, [setCurrent]);\n\n  return [current, next, previous];\n}\n\nexport function formatBytes(bytes: number, decimals = 2): string {\n  if (bytes === 0) return \"0 Bytes\";\n\n  const k = 1024;\n  const dm = decimals < 0 ? 0 : decimals;\n  const sizes = [\"Bytes\", \"KB\", \"MB\", \"GB\", \"TB\", \"PB\", \"EB\", \"ZB\", \"YB\"];\n\n  const i = Math.floor(Math.log(bytes) / Math.log(k));\n\n  return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + \" \" + sizes[i];\n}\n\nexport type Submit = {\n  submitting: boolean;\n  submit: () => void;\n  reset: () => void;\n};\nexport function useSubmit(init: boolean) {\n  const [value, setValue] = useState(init);\n\n  const reset = useCallback(() => {\n    setValue(false);\n  }, [setValue]);\n\n  const set = useCallback(() => {\n    setValue(true);\n  }, [setValue]);\n\n  return { submitting: value, set, reset };\n}\n\nexport type StepProps = {\n  visible: boolean;\n  submit: boolean;\n  resetSubmit: () => void;\n  enableNext: () => void;\n};\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { AzureMapsManagementClient } from \"@azure/arm-maps\";\nimport React, { useCallback, useState } from \"react\";\nimport { creator, login } from \"./api\";\n\ntype StateUpdater<T> = React.Dispatch<React.SetStateAction<T>>;\n\ntype IDeploymentState = {\n  subscriptionId: string | null;\n  tenantId: string | null;\n  mapSubscriptionKey: string | null;\n  drawingUUIDs: string[] | null;\n  tileSetId: string | null;\n  statesetId: string | null;\n};\n\nconst initialState: IDeploymentState = {\n  subscriptionId: null,\n  tenantId: null,\n  mapSubscriptionKey: null,\n  drawingUUIDs: null,\n  tileSetId: null,\n  statesetId: null,\n};\n\nexport type IDeploymentContext = IDeploymentState & {\n  store: (data: Partial<IDeploymentState>) => void;\n};\n\nconst DeploymentContext = React.createContext({} as IDeploymentContext);\nconst { Provider } = DeploymentContext;\n\nconst DeploymentProvider: React.FC<{ children: React.ReactNode }> = ({\n  children,\n}) => {\n  const [state, setState] = useState<IDeploymentState>(initialState);\n  const store = useCallback(\n    (data: Partial<IDeploymentState>) => {\n      setState((current) => ({ ...current, ...data }));\n    },\n    [setState]\n  );\n\n  const value = { ...state, store };\n\n  return <Provider value={value}>{children}</Provider>;\n};\n\nexport { DeploymentProvider as default, DeploymentContext };\n","import { TextField } from \"@fluentui/react\";\nimport React, { useContext, useEffect, useRef, useState } from \"react\";\nimport { DeploymentContext } from \"../deploymentContext\";\nimport { StepProps } from \"../hooks\";\n\nconst Deploy = React.memo<StepProps>(\n  ({ visible, enableNext, submit, resetSubmit }) => {\n    const { store, subscriptionId, tenantId, mapSubscriptionKey } =\n      useContext(DeploymentContext);\n\n    const [data, setData] = useState(\n      // subscriptionId && tenantId && mapSubscriptionKey\n      //   ?\n      {\n        subscriptionId: \"7c989b7d-a7d5-4256-9f3f-809d6554cec8\",\n        tenantId: \"72f988bf-86f1-41af-91ab-2d7cd011db47\",\n        mapSubscriptionKey: \"fzIwvA-PX2RNMM0P_9SoCSZHvX3iFD2712Qemctrqwk\",\n      }\n      // : { subscriptionId: \"\", tenantId: \"\", mapSubscriptionKey: \"\" }\n    );\n    const nextEnabled = useRef(false);\n\n    useEffect(() => {\n      if (submit) {\n        resetSubmit();\n        store(data);\n      }\n    }, [submit, resetSubmit, store, data]);\n\n    useEffect(() => {\n      if (\n        data.subscriptionId &&\n        data.tenantId &&\n        data.mapSubscriptionKey &&\n        !nextEnabled.current\n      ) {\n        enableNext();\n        nextEnabled.current = true;\n      }\n    }, [data, enableNext]);\n\n    if (!visible) {\n      return null;\n    }\n\n    return (\n      <div>\n        <h2>Deploy Maps account to your Azure Subscription</h2>\n        <p>\n          Click on the button below to deploy the solution to your azure\n          subscription.\n        </p>\n        <a\n          href=\"https://portal.azure.com/#create/Microsoft.Template/uri/https%3A%2F%2Fraw.githubusercontent.com%2Flucadruda%2Fubs-workshop%2Findoor_maps%2Fsetup%2Fazure%2Fazuredeploy.json%3Ftoken%3DAARKIISFGX2MRU7JK7VOZXTBNFEMQ\"\n          target=\"_blank\"\n        >\n          <img src=\"https://aka.ms/deploytoazurebutton\" />\n        </a>\n        <div></div>\n        <div style={{ textAlign: \"start\" }}>\n          <TextField\n            label=\"Subscription Id\"\n            value={data.subscriptionId}\n            onChange={(e, val) => {\n              setData((current) => ({ ...current, subscriptionId: val! }));\n            }}\n          />\n          <TextField\n            label=\"Tenant Id\"\n            value={data.tenantId}\n            onChange={(e, val) => {\n              setData((current) => ({ ...current, tenantId: val! }));\n            }}\n          />\n          <TextField\n            label=\"Map Subscription Key\"\n            value={data.mapSubscriptionKey}\n            onChange={(e, val) => {\n              setData((current) => ({ ...current, mapSubscriptionKey: val! }));\n            }}\n          />\n        </div>\n      </div>\n    );\n  }\n);\nexport default Deploy;\n","import { AzureMapsManagementClient } from \"@azure/arm-maps\";\nimport { InteractiveBrowserCredential } from \"@azure/identity\";\nimport { ResourceManagementClient } from \"@azure/arm-resources\";\nimport axios, { AxiosResponse } from \"axios\";\n\nconst RESOURCE_GROUP = \"iotc-indoor-maps\";\nconst ACCOUNT_NAME = \"iim-account\";\nconst API_VERSION = \"2.0\";\n\n// const client = new AzureMapsManagementClient(credential, SUBSCRIPTION_ID);\n\nexport async function createResourceGroup(\n  armClient: ResourceManagementClient,\n  location?: string\n) {\n  const exists = await armClient.resourceGroups.checkExistence(RESOURCE_GROUP);\n  if (exists.body) {\n    return;\n  }\n  await armClient.resourceGroups.createOrUpdate(RESOURCE_GROUP, {\n    location: location ?? \"westeurope\",\n  });\n}\n\nexport async function creator(client: AzureMapsManagementClient) {\n  const account = await client.accounts.createOrUpdate(\n    RESOURCE_GROUP,\n    ACCOUNT_NAME,\n    {\n      sku: { name: \"G2\" },\n      kind: \"Gen2\",\n    }\n  );\n  console.log(account);\n}\n\nexport async function login(tenantId: string, subscriptionId: string) {\n  const credential = new InteractiveBrowserCredential({\n    clientId: \"0523c52d-806a-4f07-9dda-8950eb13055f\",\n    tenantId,\n  });\n\n  const client = new AzureMapsManagementClient(credential, subscriptionId);\n  return client;\n}\n\nexport async function uploadPackage(\n  data: any,\n  location: string,\n  subscriptionKey: string,\n  onProgress: (progress: number) => void\n) {\n  let progress = 0;\n  const res = await axios.post<any>(\n    `https://${location}.atlas.microsoft.com/mapData?api-version=${API_VERSION}&dataFormat=dwgzippackage&subscription-key=${subscriptionKey}`,\n    data,\n    {\n      headers: {\n        \"Content-Type\": \"application/octet-stream\",\n      },\n    }\n  );\n  onProgress((progress += 0.1));\n  if (res.headers[\"operation-location\"]) {\n    // call this until 200 and return drawing id\n    return await waitForSuccess(\n      `${res.headers[\"operation-location\"]}&subscription-key=${subscriptionKey}`,\n      {\n        body: \"status\",\n        header: \"resource-location\",\n      },\n      (res) => {\n        const re =\n          /https:\\/\\/us\\.atlas\\.microsoft\\.com\\/mapData\\/metadata\\/([\\S]+)\\?api-version=2\\.0/;\n        const matches = res.headers[\"resource-location\"].match(re);\n        if (matches && matches.length === 2) {\n          return matches[1];\n        }\n        return null;\n      },\n      onProgress\n    );\n  }\n}\n\nexport async function convertPackage(\n  udid: string,\n  location: string,\n  subscriptionKey: string\n) {\n  const res = await axios.post<any>(\n    `https://${location}.atlas.microsoft.com/conversions?api-version=${API_VERSION}&udid=${udid}&inputType=DWG&subscription-key=${subscriptionKey}&outputOntology=facility-2.0`\n  );\n  if (res.headers[\"operation-location\"]) {\n    // call this until 200 and return drawing id\n    return await waitForSuccess(\n      `${res.headers[\"operation-location\"]}&subscription-key=${subscriptionKey}`,\n      {\n        body: \"status\",\n        header: \"resource-location\",\n      },\n      (res) => {\n        const re = new RegExp(\n          `https://${location}.atlas.microsoft.com/conversions/([\\\\S]+)\\\\?api-version=${API_VERSION}`\n        );\n        const matches = res.headers[\"resource-location\"].match(re);\n        if (matches && matches.length === 2) {\n          return matches[1];\n        }\n        return null;\n      }\n    );\n  }\n}\n\nexport async function createOrUpdateDataSet(\n  conversionId: string,\n  location: string,\n  subscriptionKey: string,\n  datasetId?: string\n) {\n  const res = await axios.post<any>(\n    `https://${location}.atlas.microsoft.com/datasets?api-version=${API_VERSION}&conversionId=${conversionId}&subscription-key=${subscriptionKey}${\n      datasetId ? `&datasetId=${datasetId}` : \"\"\n    }`\n  );\n  if (res.headers[\"operation-location\"]) {\n    // call this until 200 and return drawing id\n    return await waitForSuccess(\n      `${res.headers[\"operation-location\"]}&subscription-key=${subscriptionKey}`,\n      {\n        body: \"status\",\n        header: \"resource-location\",\n      },\n      (res) => {\n        const re = new RegExp(\n          `https://${location}.atlas.microsoft.com/datasets/([\\\\S]+)\\\\?api-version=${API_VERSION}`\n        );\n        const matches = res.headers[\"resource-location\"].match(re);\n        if (matches && matches.length === 2) {\n          return matches[1];\n        }\n        return null;\n      }\n    );\n  }\n}\n\nexport async function createTileset(\n  datasetId: string,\n  location: string,\n  subscriptionKey: string\n) {\n  const res = await axios.post<any>(\n    `https://${location}.atlas.microsoft.com/tilesets?api-version=${API_VERSION}&datasetID=${datasetId}&subscription-key=${subscriptionKey}`\n  );\n  if (res.headers[\"operation-location\"]) {\n    // call this until 200 and return drawing id\n    return await waitForSuccess(\n      `${res.headers[\"operation-location\"]}&subscription-key=${subscriptionKey}`,\n      {\n        body: \"status\",\n        header: \"resource-location\",\n      },\n      (res) => {\n        const re = new RegExp(\n          `https://${location}.atlas.microsoft.com/tilesets/([\\\\S]+)\\\\?api-version=${API_VERSION}`\n        );\n        const matches = res.headers[\"resource-location\"].match(re);\n        if (matches && matches.length === 2) {\n          return matches[1];\n        }\n        return null;\n      }\n    );\n  }\n}\n\nexport async function createStateset(\n  datasetId: string,\n  location: string,\n  subscriptionKey: string\n) {\n  const res = await axios.post<any>(\n    `https://${location}.atlas.microsoft.com/featurestatesets?api-version=${API_VERSION}&datasetId=${datasetId}&subscription-key=${subscriptionKey}`,\n    {\n      styles: [\n        {\n          keyName: \"occupied\",\n          type: \"boolean\",\n          rules: [\n            {\n              true: \"#8e5a00\",\n              false: \"#FFFFFF\",\n            },\n          ],\n        },\n        {\n          keyName: \"temperature\",\n          type: \"number\",\n          rules: [\n            {\n              range: {\n                minimum: \"13\",\n                exclusiveMaximum: \"18\",\n              },\n              color: \"#0000FF\",\n            },\n            {\n              range: {\n                minimum: \"24\",\n              },\n              color: \"#FF0000\",\n            },\n            {\n              range: {\n                minimum: \"18\",\n                exclusiveMaximum: \"24\",\n              },\n              color: \"#00FF00\",\n            },\n          ],\n        },\n      ],\n    },\n    {\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    }\n  );\n  if (res.status === 200) {\n    return res.data[\"statesetId\"];\n  }\n  return null;\n}\n\nasync function waitForSuccess(\n  url: string,\n  expectedResult: {\n    body?: string;\n    header?: string;\n  },\n  onSuccess: (res: AxiosResponse<any>) => string | null,\n  onProgress?: (progress: number) => void\n): Promise<string> {\n  return new Promise<string>((resolve, reject) => {\n    let progress = 0;\n    const intid = setInterval(async () => {\n      onProgress?.((progress += 0.1));\n      try {\n        const res = await axios.get<any>(url);\n        if (\n          res.status === 200 &&\n          ((expectedResult.body &&\n            res.data[expectedResult.body] === \"Succeeded\") ||\n            (expectedResult.header && res.headers[expectedResult.header]))\n        ) {\n          clearInterval(intid);\n          onProgress?.(1);\n          const result = onSuccess(res);\n          if (result) {\n            resolve(result);\n          } else {\n            reject(result);\n          }\n        }\n      } catch (ex) {\n        reject();\n      }\n    }, 5000);\n  });\n}\n","import {\n  DefaultButton,\n  Icon,\n  List,\n  mergeStyleSets,\n  ProgressIndicator,\n} from \"@fluentui/react\";\nimport React, {\n  useCallback,\n  useContext,\n  useEffect,\n  useRef,\n  useState,\n} from \"react\";\nimport { useDropzone } from \"react-dropzone\";\nimport { uploadPackage } from \"../api\";\nimport { DeploymentContext } from \"../deploymentContext\";\nimport { formatBytes, StepProps } from \"../hooks\";\n\nconst classNames = mergeStyleSets({\n  listGrid: {\n    width: \"90%\",\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    gap: 20,\n  },\n  listGridItem: {\n    padding: 5,\n    width: 200,\n    height: 180,\n    alignItems: \"center\",\n    textAlign: \"center\",\n    display: \"inline-flex\",\n    justifyContent: \"center\",\n    border: \"1px solid black\",\n  },\n  clickable: {\n    backgroundColor: \"#f3f2f1\",\n    \"&:hover\": {\n      backgroundColor: \"#FFFFFF\",\n      cursor: \"pointer\",\n    },\n  },\n  button: {\n    display: \"flex\",\n    flexDirection: \"column\",\n  },\n});\n\ntype UploadData = {\n  progress: number;\n  name: string;\n  size: string;\n  uuid?: string;\n};\n\nconst Upload = React.memo<StepProps>(\n  ({ visible, enableNext, submit, resetSubmit }) => {\n    const [items, setItems] = useState<(UploadData | null)[]>([null]);\n    const { mapSubscriptionKey, store } = useContext(DeploymentContext);\n\n    const nextEnabled = useRef(false);\n\n    const uploadFn = useCallback(\n      (acceptedFiles) => {\n        acceptedFiles.forEach((file: File) => {\n          const reader = new FileReader();\n          reader.onload = async () => {\n            const drawingUUid = await uploadPackage(\n              reader.result,\n              \"us\",\n              mapSubscriptionKey!,\n              (progress) => {\n                setItems((current) =>\n                  current.map((i) => {\n                    if (i?.name === file.name) {\n                      return { ...i, progress };\n                    }\n                    return i;\n                  })\n                );\n              }\n            );\n            if (drawingUUid) {\n              setItems((current) =>\n                current.map((i) => {\n                  if (i?.name === file.name) {\n                    return { ...i, uuid: drawingUUid };\n                  }\n                  return i;\n                })\n              );\n            }\n          };\n\n          reader.readAsArrayBuffer(file);\n          setItems((current) => [\n            { name: file.name, size: formatBytes(file.size), progress: 0 },\n            ...current,\n          ]);\n        });\n      },\n      [setItems, mapSubscriptionKey]\n    );\n\n    const { getRootProps, getInputProps, isDragActive } = useDropzone({\n      onDrop: uploadFn,\n      maxFiles: 1,\n      accept: \".zip\",\n    });\n\n    useEffect(() => {\n      if (submit) {\n        resetSubmit();\n        store({\n          drawingUUIDs: items\n            .filter((i) => i?.uuid)\n            .map((i) => i?.uuid) as string[],\n        });\n      }\n    }, [submit, resetSubmit, store, items]);\n\n    useEffect(() => {\n      if (items.length > 1 && !nextEnabled.current) {\n        enableNext();\n        nextEnabled.current = true;\n      }\n    }, [items, enableNext]);\n\n    const onRenderCell = React.useCallback(\n      (item: UploadData | null, index) => {\n        return (\n          <div\n            key={`upload-b-${index}`}\n            className={`${classNames.listGridItem} ${\n              item === null ? classNames.clickable : \"\"\n            }`}\n          >\n            {item === null ? (\n              <div {...getRootProps()}>\n                <input {...getInputProps()} />\n                <div className={classNames.button}>\n                  <Icon iconName=\"AddIn\" />\n                  <h3>Add a drawing</h3>\n                </div>\n              </div>\n            ) : (\n              <div>\n                <h2>{item.name}</h2>\n                <ProgressIndicator\n                  label={\n                    item.progress < 1\n                      ? \"Uploading package...\"\n                      : \"Package ready.\"\n                  }\n                  description={item.uuid ?? \"\"}\n                  percentComplete={item.progress}\n                  progressHidden={item.progress === 1}\n                />\n                <h3>{item.size}</h3>\n              </div>\n            )}\n          </div>\n        );\n      },\n      [getInputProps, getRootProps]\n    );\n\n    if (!visible) {\n      return null;\n    }\n    if (!mapSubscriptionKey) {\n      return <div>loading</div>;\n    }\n    return <div className={classNames.listGrid}>{items.map(onRenderCell)}</div>;\n  }\n);\n\nexport default Upload;\n","import { mergeStyleSets, ProgressIndicator } from \"@fluentui/react\";\nimport React, { useCallback, useContext, useEffect, useState } from \"react\";\nimport {\n  convertPackage,\n  createOrUpdateDataSet,\n  createStateset,\n  createTileset,\n} from \"../api\";\nimport { DeploymentContext } from \"../deploymentContext\";\nimport { StepProps } from \"../hooks\";\n\nconst classNames = mergeStyleSets({\n  content: {\n    width: \"90%\",\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n  },\n});\n\nconst Configure = React.memo<StepProps>(({ visible }) => {\n  const [text, setText] = useState({ label: \"\", description: \"\" });\n  const { drawingUUIDs, mapSubscriptionKey, store } =\n    useContext(DeploymentContext);\n\n  const execute = useCallback(async () => {\n    if (!drawingUUIDs) {\n      return;\n    }\n    const convIds: string[] = [];\n    for (const drawingUUID of drawingUUIDs) {\n      setText({\n        label: `Converting packages`,\n        description: `Converting package ${drawingUUID}`,\n      });\n      const convId = await convertPackage(\n        drawingUUID,\n        \"us\",\n        mapSubscriptionKey!\n      );\n      if (convId) {\n        convIds.push(convId);\n      }\n    }\n\n    let datasetId;\n    for (const convId of convIds) {\n      setText({\n        label: `Creating data set`,\n        description: datasetId ?? \"This might take some time.\",\n      });\n      datasetId = await createOrUpdateDataSet(\n        convId,\n        \"us\",\n        mapSubscriptionKey!,\n        datasetId\n      );\n    }\n    setText({\n      label: `Dataset created. Creating tileset ...`,\n      description: datasetId ?? \"\",\n    });\n    if (datasetId) {\n      const tileSetId = await createTileset(\n        datasetId,\n        \"us\",\n        mapSubscriptionKey!\n      );\n      setText({\n        label: `Tileset created. Creating stateset ...`,\n        description: tileSetId ?? \"\",\n      });\n      if (tileSetId) {\n        const statesetId = await createStateset(\n          datasetId,\n          \"us\",\n          mapSubscriptionKey!\n        );\n        setText({\n          label: `State set created.`,\n          description: statesetId ?? \"\",\n        });\n        store({ tileSetId, statesetId });\n      }\n    }\n  }, [drawingUUIDs, mapSubscriptionKey, setText, convertPackage]);\n\n  useEffect(() => {\n    execute();\n  }, [execute]);\n\n  if (!visible) {\n    return null;\n  }\n  return (\n    <div className={classNames.content}>\n      <ProgressIndicator {...text} />\n    </div>\n  );\n});\n\nexport default Configure;\n","import { FontIcon, mergeStyleSets } from \"@fluentui/react\";\nimport React, { useState } from \"react\";\nimport { useSteps, useSubmit } from \"./hooks\";\nimport Deploy from \"./steps/Deploy\";\nimport Upload from \"./steps/Upload\";\nimport DeploymentProvider from \"./deploymentContext\";\nimport Configure from \"./steps/Configure\";\n\nconst styles = {\n  wizardBody: {\n    display: \"flex\",\n    justifyContent: \"center\",\n    textAlign: \"center\",\n  },\n  footer: {\n    position: \"absolute\",\n    bottom: \"5%\",\n    display: \"flex\",\n    justifyContent: \"space-evenly\",\n    width: \"100%\",\n  },\n  arrow: {\n    alignItems: \"center\",\n    display: \"flex\",\n    width: 100,\n    justifyContent: \"space-evenly\",\n  },\n  icon: {\n    cursor: \"pointer\",\n  },\n};\n\nconst classNames = mergeStyleSets(styles);\n\nconst App = React.memo(() => {\n  return (\n    <DeploymentProvider>\n      <Wizard />\n    </DeploymentProvider>\n  );\n});\n\nexport function Wizard() {\n  const [current, next, previous] = useSteps(0);\n  const [nextEnabled, setNextEnabled] = useState(false);\n  const submit = useSubmit(false);\n  const totalSteps = 3;\n\n  return (\n    <div className={classNames.wizardBody}>\n      <Deploy\n        visible={current === 0}\n        enableNext={() => setNextEnabled(true)}\n        submit={submit.submitting && current === 1}\n        resetSubmit={submit.reset}\n      />\n      <Upload\n        visible={current === 1}\n        enableNext={() => setNextEnabled(true)}\n        submit={submit.submitting && current === 2}\n        resetSubmit={submit.reset}\n      />\n       <Configure\n        visible={current === 2}\n        enableNext={() => setNextEnabled(true)}\n        submit={submit.submitting && current === 3}\n        resetSubmit={submit.reset}\n      />\n      <div className={classNames.footer}>\n        <div\n          className={classNames.arrow}\n          style={{\n            display: current === 0 ? \"none\" : \"flex\",\n          }}\n        >\n          <p>Previous</p>\n          <FontIcon\n            iconName=\"Back\"\n            onClick={previous}\n            className={classNames.icon}\n          />\n        </div>\n        <div\n          className={classNames.arrow}\n          style={{\n            display:\n              current === totalSteps - 1 || !nextEnabled ? \"none\" : \"flex\",\n          }}\n        >\n          <p>Next</p>\n          <FontIcon\n            iconName=\"Forward\"\n            onClick={() => {\n              next();\n              submit.set();\n            }}\n            className={classNames.icon}\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { initializeIcons } from \"@fluentui/font-icons-mdl2\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\ninitializeIcons();\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}